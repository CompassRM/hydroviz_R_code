LOCAL_data_list <- paste0('\'', paste(LOCAL_data_list, collapse='\',\''), '\'')
LOCAL_data_list
# table_names <-c("alternatives", "sources", "types")
table_names <-c("alternatives", "sources")
message(table_name)
for (table_name in table_names) {
message(table_name)
# Get data from the df
LOCAL_data <- data.frame(dplyr::distinct(df, table_name[1]))
}
# Get data from the df
LOCAL_data <- data.frame(dplyr::distinct(df, table_name[1]))
LOCAL_data
colnames(LOCAL_data) <- table_name[1]
LOCAL_data
# Get data from the df
LOCAL_data <- data.frame(dplyr::distinct(df, table_name[1]))
LOCAL_data
column_name = substr(table_name[1],1,nchar(table_name[1])-1)
column_name
colnames(LOCAL_data) <- column_name
LOCAL_data
LOCAL_data_list <- as.character(LOCAL_data$column_name)
LOCAL_data_list
LOCAL_data$column_name
column_name
LOCAL_data
# Get data from the df
LOCAL_data <- data.frame(dplyr::distinct(df, table_name[1]))
LOCAL_data
table_name[1])
table_name[1]
View(df)
View(df)
LOCAL_data
column_name = substr(table_name[1],1,nchar(table_name[1])-1)
column_name
# Get data from the df
LOCAL_data <- data.frame(dplyr::distinct(df, column_name))
data.frame(dplyr::distinct(df, column_name[1]))
data.frame(dplyr::distinct(df, source))
column_name[1]
column_name[1][1]
source
# Get data from the df
LOCAL_sources <- data.frame(dplyr::distinct(df, source))
LOCAL_sources
message(table_name)
column_name = substr(table_name[1],1,nchar(table_name[1])-1)
column_name
data.frame(dplyr::distinct(df, column_name[1]))
typeof(column_name[1])
typeof(column_name)
typeof("column_name")
LOCAL_sources
LOCAL_sources$source
column_name
LOCAL_sources$source
LOCAL_sources$column_name
LOCAL_sources$column_name[1]
LOCAL_sources$eval(column_name)
eval(column_name)
# ***********************
DB_sources_after <- dbReadTable(connection, "sources")
DB_sources_after
# Get data from the df
LOCAL_types <-
data.frame(dplyr::distinct(df, type, units, measure))
LOCAL_types
LOCAL_types_list <- as.character(LOCAL_types$type)
LOCAL_types_list
dbReadTable(connection, "types")
LOCAL_types <-
data.frame(dplyr::distinct(df, type, units, measure))
LOCAL_types
# QUERY USING THE STRING to see if any of the LOCAL_types exist in the DB (return all LOCAL_types that are in the DB)
DB_types <- dbGetQuery(connection, paste0("SELECT type FROM types WHERE type IN (", LOCAL_types_list, ")"))
LOCAL_types <-
data.frame(dplyr::distinct(df, type, units, measure))
LOCAL_types_list <- as.character(LOCAL_types$type)
LOCAL_types_list <- paste0('\'', paste(LOCAL_types_list, collapse='\',\''), '\'')
LOCAL_types_list
# QUERY USING THE STRING to see if any of the LOCAL_types exist in the DB (return all LOCAL_types that are in the DB)
DB_types <- dbGetQuery(connection, paste0("SELECT type FROM types WHERE type IN (", LOCAL_types_list, ")"))
DB_types
match(DB_types$type, LOCAL_types$type)
# Which of the LOCAL_types is in the DB?
db_matches <- match(DB_types$type, LOCAL_types$type)
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_types[-c(db_matches),, drop=F]
to_insert
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
num_insert
if (num_insert > 0) {
dbWriteTable(
connection,
"types",
to_insert,
row.names = FALSE,
append = TRUE,
overwrite = FALSE
) # to protect current values
message(
c(
length(LOCAL_types$type),
" TYPES in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
)
)
} else {
message(
c(
length(LOCAL_types$type),
" TYPES in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
)
)
}
data.frame(dplyr::distinct(df, river))
data.frame(dplyr::distinct(df, location))
data.frame(dplyr::distinct(df, date))
data.frame(dplyr::distinct(df, date))
dbReadTable(connection, "year_dates")
# Get data from the df
LOCAL_rivers <- data.frame(dplyr::distinct(df, river))
LOCAL_rivers
LOCAL_rivers$river <- as.character(LOCAL_rivers$river)
LOCAL_rivers
LOCAL_rivers_list <- as.character(LOCAL_rivers$river)
LOCAL_rivers_list <- paste0('\'', paste(LOCAL_rivers_list, collapse='\',\''), '\'')
LOCAL_rivers_list
# QUERY USING THE STRING to see if any of the LOCAL_rivers exist in the DB (return all LOCAL_rivers that are in the DB)
DB_rivers <- dbGetQuery(connection, paste0("SELECT river FROM rivers WHERE river IN (", LOCAL_rivers_list, ")"))
connection <- dbConnect(
driver,
dbname = Sys.getenv("dbnametest"),
host = Sys.getenv("testhost"),
port = Sys.getenv("port"),
user = Sys.getenv("user"),
password = Sys.getenv("password")
)
# Get data from the df
LOCAL_rivers <- data.frame(dplyr::distinct(df, river))
LOCAL_rivers$river <- as.character(LOCAL_rivers$river)
LOCAL_rivers_list <- as.character(LOCAL_rivers$river)
LOCAL_rivers_list <- paste0('\'', paste(LOCAL_rivers_list, collapse='\',\''), '\'')
# QUERY USING THE STRING to see if any of the LOCAL_rivers exist in the DB (return all LOCAL_rivers that are in the DB)
DB_rivers <- dbGetQuery(connection, paste0("SELECT river FROM rivers WHERE river IN (", LOCAL_rivers_list, ")"))
# Which of the LOCAL_rivers is in the DB?
db_matches <- match(DB_rivers$river, LOCAL_rivers$river)
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_rivers[-c(db_matches),, drop=F]
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
num_insert <- length(to_insert[[1]])
num_insert
to_insert
db_matches
DB_rivers
LOCAL_rivers
if (num_insert > 0) {
dbWriteTable(
connection,
"rivers",
to_insert,
row.names = FALSE,
append = TRUE,
overwrite = FALSE
) # to protect current values
message(
c(
length(LOCAL_rivers$river),
" riverS in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
)
)
} else {
message(
c(
length(LOCAL_rivers$river),
" riverS in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
)
)
}
LOCAL_locations <- data.frame(dplyr::distinct(df, location))
LOCAL_locations$location <- as.character(LOCAL_locations$location)
LOCAL_locations_list <- as.character(LOCAL_locations$location)
LOCAL_locations_list <- paste0('\'', paste(LOCAL_locations_list, collapse='\',\''), '\'')
# QUERY USING THE STRING to see if any of the LOCAL_locations exist in the DB (return all LOCAL_locations that are in the DB)
DB_locations <- dbGetQuery(connection, paste0("SELECT location FROM locations WHERE location IN (", LOCAL_locations_list, ")"))
# Which of the LOCAL_locations is in the DB?
db_matches <- match(DB_locations$location, LOCAL_locations$location)
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_locations[-c(db_matches),, drop=F]
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
LOCAL_locations
DB_locations
LOCAL_locations
LOCAL_locations_list
num_insert
# Get data from the df
distinctDates <- data.frame(dplyr::distinct(df, date))
LOCAL_months <-
data.frame(month_name = unique(months(distinctDates$date)))
LOCAL_months_list <- as.character(LOCAL_months$month)
LOCAL_months_list
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT DISTINCT COUNT(month) AS Count FROM months")
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT DISTINCT COUNT(month) FROM months")
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT COUNT(month) FROM months")
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT COUNT(DISTINCT month) FROM months")
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT COUNT month FROM months")
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT month FROM months")
# QUERY USING THE STRING to see if any of the LOCAL_months exist in the DB (return all LOCAL_months that are in the DB)
DB_months <- dbGetQuery(connection, paste0("SELECT month FROM months WHERE month IN (", LOCAL_months_list, ")"))
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT * FROM months")
DB_months_exists
# JUST CHECK IF THE MONTHS TABLE EXISTS. IF IT DOES, SKIP THIS STEP.
DB_months_exists <- dbGetQuery(connection, "SELECT COUNT(DISTINCT month_name) FROM months")
DB_months_exists
?and
?and
DB_months_exists < 12
DB_months_exists > 0
(DB_months_exists < 12) && (DB_months_exists > 0)
if ((DB_months_exists < 12) && (DB_months_exists > 0)) {
message("Possible DB error - less than 12 months in the 'months' table")
} else if (DB_months_exists == 0) {
# Insert into DB
} else {
message("Months table already in DB - nothing added")
}
DB_months_exists <- dbGetQuery(connection, "SELECT COUNT(DISTINCT test_column) FROM test_table")
DB_months_exists
if ((DB_months_exists < 12) && (DB_months_exists > 0)) {
message("Possible DB error - less than 12 months in the 'months' table")
} else if (DB_months_exists == 0) {
# Insert into DB
message("Inserting into DB")
} else {
message("Months table already in DB - nothing added")
}
DB_months_exists <-
dbGetQuery(connection, "SELECT COUNT(DISTINCT month_name) FROM months")
if ((DB_months_exists < 12) &&
(DB_months_exists > 0)) {
message("Possible DB error - less than 12 months in the 'months' table")
} else if (DB_months_exists == 0) {
# Insert into DB
# Get data from the df
distinctDates <- data.frame(dplyr::distinct(df, date))
LOCAL_months <-
data.frame(month_name = unique(months(distinctDates$date)))
LOCAL_months_list <- as.character(LOCAL_months$month)
LOCAL_months_list <-
paste0('\'', paste(LOCAL_months_list, collapse = '\',\''), '\'')
# QUERY USING THE STRING to see if any of the LOCAL_months exist in the DB (return all LOCAL_months that are in the DB)
DB_months <-
dbGetQuery(
connection,
paste0(
"SELECT month FROM months WHERE month IN (",
LOCAL_months_list,
")"
)
)
# Which of the LOCAL_months is in the DB?
db_matches <- match(DB_months$month, LOCAL_months$month)
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_months[-c(db_matches), , drop = F]
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
if (num_insert > 0) {
dbWriteTable(
connection,
"months",
to_insert,
row.names = FALSE,
append = TRUE,
overwrite = FALSE
) # to protect current values
message(c(
length(LOCAL_months$month),
" MONTHS in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
))
} else {
message(c(
length(LOCAL_months$month),
" MONTHS in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
))
}
} else {
message("Months table already in DB - nothing added")
}
# Check if the 'modeled_dates' table exists. If it does, skip this step.
DB_modeled_dates_exists <-
dbGetQuery(connection, "SELECT COUNT(DISTINCT date) FROM modeled_dates")
DB_modeled_dates_exists
LOCAL_modeled_dates <- data.frame(dplyr::distinct(df, date))
LOCAL_modeled_dates
LOCAL_modeled_dates$year <-
lubridate::year(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$month <-
lubridate::month(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$day <-
lubridate::day(LOCAL_modeled_dates$date)
LOCAL_modeled_dates
LOCAL_modeled_dates_list <- as.character(LOCAL_modeled_dates$month)
LOCAL_modeled_dates_list
LOCAL_modeled_dates <- data.frame(dplyr::distinct(df, date))
LOCAL_modeled_dates$year <-
lubridate::year(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$month <-
lubridate::month(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$day <-
lubridate::day(LOCAL_modeled_dates$date)
# LOCAL_modeled_dates_list <- as.character(LOCAL_modeled_dates$month)
LOCAL_modeled_dates_list <-
paste0('\'', paste(LOCAL_modeled_dates_list, collapse = '\',\''), '\'')
LOCAL_modeled_dates_list
LOCAL_modeled_dates <- data.frame(dplyr::distinct(df, date))
LOCAL_modeled_dates$year <-
lubridate::year(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$month <-
lubridate::month(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$day <-
lubridate::day(LOCAL_modeled_dates$date)
LOCAL_modeled_dates
# 1 - query the table to see which values exist in the DB compared to my dataframe
DB_modeled_dates <- dbReadTable(connection, "modeled_dates")
DB_modeled_dates
LOCAL_modeled_dates_list <- as.character(LOCAL_modeled_dates$date)
LOCAL_modeled_dates_list
LOCAL_modeled_dates <- data.frame(dplyr::distinct(df, date))
LOCAL_modeled_dates$year <-
lubridate::year(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$month <-
lubridate::month(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$day <-
lubridate::day(LOCAL_modeled_dates$date)
LOCAL_modeled_dates_list <- as.character(LOCAL_modeled_dates$date)
LOCAL_modeled_dates_list <-
paste0('\'', paste(LOCAL_modeled_dates_list, collapse = '\',\''), '\'')
LOCAL_modeled_dates_list
DB_modeled_dates <-
dbGetQuery(
connection,
paste0(
"SELECT date FROM modeled_dates WHERE month IN (",
LOCAL_modeled_dates_list,
")"
)
)
# QUERY USING THE STRING to see if any of the LOCAL_modeled_dates exist in the DB (return all LOCAL_modeled_dates that are in the DB)
DB_modeled_dates <-
dbGetQuery(
connection,
paste0(
"SELECT date FROM modeled_dates WHERE date IN (",
LOCAL_modeled_dates_list,
")"
)
)
DB_modeled_dates
# Which of the LOCAL_modeled_dates is in the DB?
db_matches <- match(DB_modeled_dates$date, LOCAL_modeled_dates$date)
db_matches
LOCAL_modeled_dates$date
DB_modeled_dates$date
LOCAL_modeled_dates[-c(db_matches), , drop = F]
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_modeled_dates[-c(db_matches), , drop = F]
to_insert
db_matches
complete.cases(db_matches)
db_matches[complete.cases(db_matches), ]
db_matches[complete.cases(db_matches)]
# Which of the LOCAL_modeled_dates is in the DB?
db_matches <- match(DB_modeled_dates$date, LOCAL_modeled_dates$date)
db_matches <- db_matches[complete.cases(db_matches)]
db_matches
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_modeled_dates[-c(db_matches), , drop = F]
to_insert
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
num_insert
DB_modeled_dates_count <-
dbGetQuery(connection, "SELECT COUNT(DISTINCT date) FROM modeled_dates")
(DB_modeled_dates_count < 29930) && (DB_modeled_dates_count > 0)
if ((DB_modeled_dates_count < 29930) && (DB_modeled_dates_count > 0)) {
message("Possible DB error - less than 29930 modeled_dates in the 'modeled_dates' table")
} else if (DB_modeled_dates_count == 0) {
# INSERT INTO DB
# Get data from the df
LOCAL_modeled_dates <- data.frame(dplyr::distinct(df, date))
LOCAL_modeled_dates$year <-
lubridate::year(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$month <-
lubridate::month(LOCAL_modeled_dates$date)
LOCAL_modeled_dates$day <-
lubridate::day(LOCAL_modeled_dates$date)
LOCAL_modeled_dates_list <- as.character(LOCAL_modeled_dates$date)
LOCAL_modeled_dates_list <-
paste0('\'', paste(LOCAL_modeled_dates_list, collapse = '\',\''), '\'')
# QUERY USING THE STRING to see if any of the LOCAL_modeled_dates exist in the DB (return all LOCAL_modeled_dates that are in the DB)
DB_modeled_dates <-
dbGetQuery(
connection,
paste0(
"SELECT date FROM modeled_dates WHERE date IN (",
LOCAL_modeled_dates_list,
")"
)
)
# Which of the LOCAL_modeled_dates is in the DB?
db_matches <- match(DB_modeled_dates$date, LOCAL_modeled_dates$date)
db_matches <- db_matches[complete.cases(db_matches)]
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_modeled_dates[-c(db_matches), , drop = F]
# Check if there are any remaining LOCAL_alternatives, insert them in the DB
num_insert <- length(to_insert[[1]])
if (num_insert > 0) {
dbWriteTable(
connection,
"modeled_dates",
to_insert,
row.names = FALSE,
append = TRUE,
overwrite = FALSE
) # to protect current values
message(c(
length(LOCAL_modeled_dates$month),
" MODELED_DATES in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
))
} else {
message(c(
length(LOCAL_modeled_dates$month),
" MODELED_DATES in df, ",
length(db_matches),
" duplicates, ",
num_insert,
" inserted in DB"
))
}
} else {
message("Modeled_dates table already in DB - nothing added")
}
# From LOCAL_sources, remove all of those that are in the DB to get just those to be inserted
to_insert <- LOCAL_modeled_dates[-c(db_matches), , drop = F]
to_insert
to_insert$date <-
as.character(to_insert$date) # Change date to character to put in DB
to_insert
DB_year_dates_count <-
dbGetQuery(connection, "SELECT COUNT(DISTINCT id) FROM year_dates")
DB_year_dates_count
one_year <- df[year(df$date) == 1931, ]$date
LOCAL_year_dates <- data.frame(id = 1:365)
LOCAL_year_dates$month_name <- months(unique(one_year))
LOCAL_year_dates$month <-
as.integer(format(unique(one_year), "%m"))
LOCAL_year_dates$day <- lubridate::day(unique(one_year))
# Prep one year of dates to insert in DB
one_year <- df[year(df$date) == 1931, ]$date
df$date
year(df$date)
# Prep one year of dates to insert in DB
one_year <- df[lubridate::year(df$date) == 1931, ]$date
one_year
LOCAL_year_dates <- data.frame(id = 1:365)
LOCAL_year_dates$month_name <- months(unique(one_year))
LOCAL_year_dates$month <-
as.integer(format(unique(one_year), "%m"))
LOCAL_year_dates$day <- lubridate::day(unique(one_year))
LOCAL_year_dates
LOCAL_year_dates_list <- as.character(LOCAL_year_dates$date)
LOCAL_year_dates_list
LOCAL_year_dates
